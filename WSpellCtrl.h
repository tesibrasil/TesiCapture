#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CWspellctrl wrapper class

class CWspellctrl : public CWnd
{
protected:
	DECLARE_DYNCREATE(CWspellctrl)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x245338C3, 0xBCA3, 0x4A2C, { 0xA7, 0xB7, 0x53, 0x34, 0x59, 0x99, 0xA8, 0xE8 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DWSpell

// Functions
//

	CString get_Suggestion(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x50, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	CString get_MainDictionary(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x51, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	CString get_UserDictionary(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x52, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void AddMainDictionary(LPCTSTR fileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, parms, fileName);
	}
	void AddUserDictionary(LPCTSTR fileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x38, DISPATCH_METHOD, VT_EMPTY, NULL, parms, fileName);
	}
	void ClearTempDictionary()
	{
		InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void Close()
	{
		InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	short CreateUserDictionary(LPCTSTR fileName, short language)
	{
		short result;
		static BYTE parms[] = VTS_BSTR VTS_I2 ;
		InvokeHelper(0x3b, DISPATCH_METHOD, VT_I2, (void*)&result, parms, fileName, language);
		return result;
	}
	void DeleteFromUserDictionary(LPCTSTR userDictFile, LPCTSTR word)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, userDictFile, word);
	}
	void IgnoreAllWord()
	{
		InvokeHelper(0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void IgnoreWord()
	{
		InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL NextWord()
	{
		BOOL result;
		InvokeHelper(0x3f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void RemoveMainDictionary(LPCTSTR mainDictFile)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x40, DISPATCH_METHOD, VT_EMPTY, NULL, parms, mainDictFile);
	}
	void RemoveUserDictionary(LPCTSTR userDictFile)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x41, DISPATCH_METHOD, VT_EMPTY, NULL, parms, userDictFile);
	}
	short ReplaceAllWord()
	{
		short result;
		InvokeHelper(0x42, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short ReplaceWord()
	{
		short result;
		InvokeHelper(0x43, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short Resume()
	{
		short result;
		InvokeHelper(0x44, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short Start()
	{
		short result;
		InvokeHelper(0x45, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	void Suggest()
	{
		InvokeHelper(0x46, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL TestWord(LPCTSTR word)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x47, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, word);
		return result;
	}
	void Undo()
	{
		InvokeHelper(0x48, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ShowUserDictionaryDialog()
	{
		InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ShowOptionsDialog()
	{
		InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	CString get_UserDictionaryWord(LPCTSTR userDict, long index)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x53, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, userDict, index);
		return result;
	}
	long get_UserDictionaryWordCount(LPCTSTR userDict)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x54, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, userDict);
		return result;
	}
	short get_UserDictionaryWordAction(LPCTSTR userDict, LPCTSTR word)
	{
		short result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x55, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, userDict, word);
		return result;
	}
	CString get_UserDictionaryOtherWord(LPCTSTR userDict, LPCTSTR word)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x56, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, userDict, word);
		return result;
	}
	long DeleteWord()
	{
		long result;
		InvokeHelper(0x4b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	short AddToUserDictionary(LPCTSTR userDict, LPCTSTR word, short action, LPCTSTR otherWord)
	{
		short result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_I2 VTS_BSTR ;
		InvokeHelper(0x4c, DISPATCH_METHOD, VT_I2, (void*)&result, parms, userDict, word, action, otherWord);
		return result;
	}
	long CheckBackgroundNotify(long ctrlHWnd, BOOL changeColor, BOOL bold, BOOL italics, BOOL underline, long textColor)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_I4 ;
		InvokeHelper(0x4d, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ctrlHWnd, changeColor, bold, italics, underline, textColor);
		return result;
	}
	long CheckBackgroundRecheck(long ctrlHWnd, BOOL changeColor, BOOL bold, BOOL italics, BOOL underline, long textColor)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_I4 ;
		InvokeHelper(0x4e, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ctrlHWnd, changeColor, bold, italics, underline, textColor);
		return result;
	}
	long CheckBackgroundMenu(long ctrlHWnd, long x, long y, long options, BOOL changeColor, BOOL bold, BOOL italics, BOOL underline, long textColor)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_I4 ;
		InvokeHelper(0x4f, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ctrlHWnd, x, y, options, changeColor, bold, italics, underline, textColor);
		return result;
	}
	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}

// Properties
//

short GetSuggestionCount()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}
void SetSuggestionCount(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}
CString GetMisspelledWord()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}
void SetMisspelledWord(CString propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}
CString GetReplacementWord()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}
void SetReplacementWord(CString propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}
CString GetText()
{
	CString result;
	GetProperty(DISPID_TEXT, VT_BSTR, (void*)&result);
	return result;
}
void SetText(CString propVal)
{
	SetProperty(DISPID_TEXT, VT_BSTR, propVal);
}
long GetWordOffset()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}
void SetWordOffset(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}
long GetWordCount()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}
void SetWordCount(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}
long GetWordsReplacedCount()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}
void SetWordsReplacedCount(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}
BOOL GetCaseSensitive()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}
void SetCaseSensitive(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}
BOOL GetCanUndo()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}
void SetCanUndo(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}
BOOL GetCatchDoubledWords()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}
void SetCatchDoubledWords(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}
BOOL GetCatchMixedCaseWords()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}
void SetCatchMixedCaseWords(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}
BOOL GetCatchWordsWithDigits()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}
void SetCatchWordsWithDigits(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}
CString GetCurrentWord()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}
void SetCurrentWord(CString propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}
BOOL GetIgnoreAllCapsWords()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}
void SetIgnoreAllCapsWords(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}
BOOL GetIgnoreMixedCaseWords()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}
void SetIgnoreMixedCaseWords(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}
BOOL GetIgnoreWordsWithDigits()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}
void SetIgnoreWordsWithDigits(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}
short GetMainDictionaryCount()
{
	short result;
	GetProperty(0x15, VT_I2, (void*)&result);
	return result;
}
void SetMainDictionaryCount(short propVal)
{
	SetProperty(0x15, VT_I2, propVal);
}
CString GetMainDictionaryFiles()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}
void SetMainDictionaryFiles(CString propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}
short GetMaxSuggestions()
{
	short result;
	GetProperty(0x17, VT_I2, (void*)&result);
	return result;
}
void SetMaxSuggestions(short propVal)
{
	SetProperty(0x17, VT_I2, propVal);
}
short GetMinSuggestionDepth()
{
	short result;
	GetProperty(0x18, VT_I2, (void*)&result);
	return result;
}
void SetMinSuggestionDepth(short propVal)
{
	SetProperty(0x18, VT_I2, propVal);
}
BOOL GetPhoneticSuggestions()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}
void SetPhoneticSuggestions(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}
BOOL GetSplitContractedWords()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}
void SetSplitContractedWords(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}
BOOL GetSplitHyphenatedWords()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}
void SetSplitHyphenatedWords(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}
BOOL GetSplitWords()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}
void SetSplitWords(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}
BOOL GetStripPossessives()
{
	BOOL result;
	GetProperty(0x1d, VT_BOOL, (void*)&result);
	return result;
}
void SetStripPossessives(BOOL propVal)
{
	SetProperty(0x1d, VT_BOOL, propVal);
}
short GetSuggestionDepth()
{
	short result;
	GetProperty(0x1e, VT_I2, (void*)&result);
	return result;
}
void SetSuggestionDepth(short propVal)
{
	SetProperty(0x1e, VT_I2, propVal);
}
short GetSuggestionDepthIncrement()
{
	short result;
	GetProperty(0x1f, VT_I2, (void*)&result);
	return result;
}
void SetSuggestionDepthIncrement(short propVal)
{
	SetProperty(0x1f, VT_I2, propVal);
}
BOOL GetSuggestSplitWords()
{
	BOOL result;
	GetProperty(0x20, VT_BOOL, (void*)&result);
	return result;
}
void SetSuggestSplitWords(BOOL propVal)
{
	SetProperty(0x20, VT_BOOL, propVal);
}
long GetTextLength()
{
	long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}
void SetTextLength(long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}
BOOL GetTypographicalSuggestions()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}
void SetTypographicalSuggestions(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}
CString GetUndoNewText()
{
	CString result;
	GetProperty(0x23, VT_BSTR, (void*)&result);
	return result;
}
void SetUndoNewText(CString propVal)
{
	SetProperty(0x23, VT_BSTR, propVal);
}
long GetUndoOffset()
{
	long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}
void SetUndoOffset(long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}
CString GetUndoOldText()
{
	CString result;
	GetProperty(0x25, VT_BSTR, (void*)&result);
	return result;
}
void SetUndoOldText(CString propVal)
{
	SetProperty(0x25, VT_BSTR, propVal);
}
short GetUserDictionaryCount()
{
	short result;
	GetProperty(0x26, VT_I2, (void*)&result);
	return result;
}
void SetUserDictionaryCount(short propVal)
{
	SetProperty(0x26, VT_I2, propVal);
}
CString GetUserDictionaryFiles()
{
	CString result;
	GetProperty(0x27, VT_BSTR, (void*)&result);
	return result;
}
void SetUserDictionaryFiles(CString propVal)
{
	SetProperty(0x27, VT_BSTR, propVal);
}
BOOL GetIgnoreCapitalizedWords()
{
	BOOL result;
	GetProperty(0x28, VT_BOOL, (void*)&result);
	return result;
}
void SetIgnoreCapitalizedWords(BOOL propVal)
{
	SetProperty(0x28, VT_BOOL, propVal);
}
BOOL GetShowContext()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}
void SetShowContext(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}
BOOL GetShowDialog()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}
void SetShowDialog(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}
long GetTextControlHWnd()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}
void SetTextControlHWnd(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}
OLE_XPOS_PIXELS GetDialogLeft()
{
	OLE_XPOS_PIXELS result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}
void SetDialogLeft(OLE_XPOS_PIXELS propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}
OLE_YPOS_PIXELS GetDialogTop()
{
	OLE_YPOS_PIXELS result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}
void SetDialogTop(OLE_YPOS_PIXELS propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}
short GetSuggestionScoreRange()
{
	short result;
	GetProperty(0x29, VT_I2, (void*)&result);
	return result;
}
void SetSuggestionScoreRange(short propVal)
{
	SetProperty(0x29, VT_I2, propVal);
}
short GetMinSuggestionScore()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}
void SetMinSuggestionScore(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}
BOOL GetAutoCorrect()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}
void SetAutoCorrect(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}
CString GetVersion()
{
	CString result;
	GetProperty(0x2c, VT_BSTR, (void*)&result);
	return result;
}
void SetVersion(CString propVal)
{
	SetProperty(0x2c, VT_BSTR, propVal);
}
long GetMisspelledWordCount()
{
	long result;
	GetProperty(0x2d, VT_I4, (void*)&result);
	return result;
}
void SetMisspelledWordCount(long propVal)
{
	SetProperty(0x2d, VT_I4, propVal);
}
short GetErrorCode()
{
	short result;
	GetProperty(0x2e, VT_I2, (void*)&result);
	return result;
}
void SetErrorCode(short propVal)
{
	SetProperty(0x2e, VT_I2, propVal);
}
BOOL GetIgnoreNonAlphaWords()
{
	BOOL result;
	GetProperty(0x2f, VT_BOOL, (void*)&result);
	return result;
}
void SetIgnoreNonAlphaWords(BOOL propVal)
{
	SetProperty(0x2f, VT_BOOL, propVal);
}
BOOL GetIgnoreDomainNames()
{
	BOOL result;
	GetProperty(0x30, VT_BOOL, (void*)&result);
	return result;
}
void SetIgnoreDomainNames(BOOL propVal)
{
	SetProperty(0x30, VT_BOOL, propVal);
}
BOOL GetAllowAccentedCaps()
{
	BOOL result;
	GetProperty(0x31, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowAccentedCaps(BOOL propVal)
{
	SetProperty(0x31, VT_BOOL, propVal);
}
BOOL GetIgnoreHTMLMarkups()
{
	BOOL result;
	GetProperty(0x32, VT_BOOL, (void*)&result);
	return result;
}
void SetIgnoreHTMLMarkups(BOOL propVal)
{
	SetProperty(0x32, VT_BOOL, propVal);
}
short GetCharacterSet()
{
	short result;
	GetProperty(0x33, VT_I2, (void*)&result);
	return result;
}
void SetCharacterSet(short propVal)
{
	SetProperty(0x33, VT_I2, propVal);
}
BOOL GetBackupUserDictionary()
{
	BOOL result;
	GetProperty(0x34, VT_BOOL, (void*)&result);
	return result;
}
void SetBackupUserDictionary(BOOL propVal)
{
	SetProperty(0x34, VT_BOOL, propVal);
}
BOOL GetShowOptionsButton()
{
	BOOL result;
	GetProperty(0x35, VT_BOOL, (void*)&result);
	return result;
}
void SetShowOptionsButton(BOOL propVal)
{
	SetProperty(0x35, VT_BOOL, propVal);
}
BOOL GetShowDictionariesButton()
{
	BOOL result;
	GetProperty(0x36, VT_BOOL, (void*)&result);
	return result;
}
void SetShowDictionariesButton(BOOL propVal)
{
	SetProperty(0x36, VT_BOOL, propVal);
}


};
